Artifacts handling
==================

Eve provides artifacts as a service, and a number of custom steps have been
defined to facilitate the interaction with the artifacts generated by a
build.

.. _GetArtifactsFromStage:

GetArtifactsFromStage
---------------------

When running, this step will analyse the artifacts that have been produced by
another stage, and locate the artifacts corresponding to the last SUCCESSFUL
build. The name of the artifacts is then stored in the property which name has
been provided in the parameters.

Parameters
++++++++++

``name``
    The name of the step as displayed on the UI.

``stage``
    The name of the stage for which Eve should lookup for the last
    SUCCESSFUL build and return the name of the artifacts.

``property``
    The name of the property where to store the result of the search.

Example
+++++++

.. code-block:: yaml

   - GetArtifactsFromStage:
       name: look-up last successful pre-merge artifacts
       property: premerge_artifacts
       stage: pre-merge

   - ShellCommand:
       name: print the name of the last successful pre-merge artifacts
       command: "echo %(prop:premerge_artifacts)s"

SetArtifactsName
----------------

This step is used internally by Eve at the start of each build.

It will set a property ``artifacts_name`` which will contain the artifact name
linked to the current build.

This property can be used later on during the build pipeline.

Example
+++++++

.. code-block:: yaml

   - ShellCommand:
       name: print the name of the artifacts for this build
       command: echo "%(prop:artifacts_name)s"

SetArtifactsPublicURL
---------------------

This step is used internally by Eve at the start of each build.

It will set a property ``artifacts_public_url`` which will contain the public
url of artifacts.

This value can be used by external users to check where artifacts are stored
for this build.

If a build needs to access the artifacts, it should use ``artifacts_private_url``
rather to avoid authentication issues.

SetArtifactsPrivateURL
----------------------

This step is used internally by Eve at the start of each build.

It will set a property ``artifacts_private_url`` which will contain the private
url of artifacts. This can be used by the build steps if they require access to
the artifacts. No authentication is required, but this url is valid inside
the pipeline only.

Example
+++++++

.. code-block:: yaml

   - ShellCommand:
       name: execute a command that retrieves an artifact
       command: "curl %(prop:artifacts_private_url)s/my_stuff"

Upload
------

Upload files to the artifacts server.

Parameters
++++++++++

``source``
    Source path to upload. All the files in this directory will be uploaded.
    The structure of the files will be identical on the server as they are
    in the source directory.

``timeout``
    Timeout parameter. If the upload takes longer than this value, the step
    will fail.

``urls``
    List here the files that will need to be displayed in the build page. The
    syntax consists of a file path (globbing is supported), and optionnaly
    a second string to use to represent the file.

Example
+++++++

.. code-block:: yaml

  - Upload:
      name: upload artifacts
      source: artifacts
      timeout: 3600
      alwaysRun: true

  - Upload:
      name: upload build artifacts
      source: build/artifacts
      urls:
        - ['\1', 'tests/unit-coverage/*']
