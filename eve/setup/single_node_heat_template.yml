heat_template_version: 2013-05-23

description: Simple template to deploy a single buildbot worker

parameters:
  image:
    type: string
    label: Image
    description: Image
  flavor:
    type: string
    label: Flavor
    description: Flavor
  key_name:
    type: string
    label: Key name
    description: Key name
  worker_init_script:
    type: string
    label: Init script
    description: Initialization script
    default: ""
  worker_requirements_script:
    type: string
    label: Requirements script
    description: Requirements script
    default: ""
  start_worker_script:
    type: string
    label: Start buildbot worker script
    description: Start buildbot worker script
  worker_version:
    type: string
    label: Worker version
    description: Buildbot worker version
  public_network:
    type: string
    label: Public network ID
    description: Public network to attach instance to.
  service_network:
    type: string
    label: Service network ID
    description: Service network to attach instance to.
  private_network:
    type: string
    label: Private network name or ID
    description: Private network to attach instance to.

resources:
  heat_worker:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - network: {get_param: public_network}
        - network: {get_param: service_network}
        - network: {get_param: private_network}
      config_drive: "true"
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
                #!/bin/bash
                set -o xtrace -o errexit -o nounset -o pipefail

                function retry {
                  local n=1
                  local max=5
                  local delay=30
                  echo "Running this command with retry ($max attempts, $delay seconds delay):"
                  echo "'$@'"
                  while true; do
                  echo "Attempt $n/$max:"
                  "$@" && break || {
                    if [[ $n -lt $max ]]; then
                      ((n++))
                      echo "Command failed. Sleeping $delay seconds." >&2
                      sleep $delay;
                    else
                      echo "The command has failed after $n attempts." >&2
                      exit 1
                    fi
                  }
                  done
                  echo "The command has succeeded."
                }

                # prepare scripts
                cat << 'EOF1' | head -c -1 > /tmp/worker_init_script.sh
                $worker_init_script
                EOF1
                chmod u+x /tmp/worker_init_script.sh
                cat << 'EOF2' | head -c -1 > /tmp/worker_requirements_script.sh
                $worker_requirements_script
                EOF2
                chmod u+x /tmp/worker_requirements_script.sh

                # add Google and OpenDNS nameservers
                echo "nameserver 8.8.8.8" >> /etc/resolv.conf
                echo "nameserver 208.67.222.222" >> /etc/resolv.conf

                # setup the private interface, if needed
                if [ `cat /sys/class/net/eth2/operstate` != "up" ]
                then
                  if [ -f /etc/redhat-release ]
                  then
                    echo $'DEVICE="eth2"\nBOOTPROTO="dhcp"\nONBOOT="yes"\nTYPE="Ethernet"\nUSERCTL="yes"\nPEERDNS="no"\nIPV6INIT="no"\nPERSISTENT_DHCLIENT="1"\nDEFROUTE="no"' > /etc/sysconfig/network-scripts/ifcfg-eth2
                  elif [ -f /etc/debian_version ]
                  then
                    echo $'auto eth2\niface eth2 inet dhcp' > /etc/network/interfaces.d/eth2.cfg && (echo; cat /etc/network/interfaces.d/eth2.cfg) >> /etc/network/interfaces
                  fi
                  ifup eth2
                fi

                if [ -s /tmp/worker_init_script.sh ] && [ ! -s /tmp/worker_requirements_script.sh ]
                then
                  # run init.sh
                  /tmp/worker_init_script.sh $worker_version
                else
                  # configure user eve and twisted version
                  if [ -f /etc/redhat-release ]
                  then
                    echo "CentOS/RedHat";

                    retry yum -y distro-sync

                    localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true
                    export LANG=en_US.utf8

                    retry yum -y install git gcc python-devel python-setuptools libffi-devel openssl-devel
                    retry easy_install pip==9.0.3

                    adduser -u 1042 --home-dir /home/eve eve
                    usermod -G wheel eve
                    echo "%wheel ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
                    if [ "$(rpm -q --queryformat '%{VERSION}' centos-release)" = "6" ]
                    then
                      twisted_version=15.4 # no more recent with python2.6 (Centos 6 only)
                    else
                      twisted_version=16.4.0
                    fi
                  elif [ -f /etc/debian_version ]
                  then
                    echo "Ubuntu/Debian"

                    retry apt-get update

                    locale-gen en_US.UTF-8
                    export LANG=en_US.utf8

                    retry apt-get install --yes git gcc python-dev python-setuptools libffi-dev python-pip

                    adduser -u 1042 --home /home/eve --disabled-password --gecos "" eve
                    adduser eve sudo
                    echo "%sudo ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
                    twisted_version=16.4.0
                  else
                    echo "Unsupported Operating System";
                    exit 1;
                  fi

                  # install twisted and buildbot
                  retry sudo pip install --index-url=https://pypi.python.org/simple/ --upgrade pip==9.0.3
                  retry sudo pip install twisted==$twisted_version
                  retry sudo pip install buildbot-worker==$worker_version

                  # run requirements.sh
                  retry /tmp/worker_requirements_script.sh
                fi

                # launch post setup hacks and run buildbot
                $start_worker_script
          params:
            "$worker_version": {get_param: worker_version}
            "$worker_init_script": {get_param: worker_init_script}
            "$worker_requirements_script": {get_param: worker_requirements_script}
            "$start_worker_script": {get_param: start_worker_script}
