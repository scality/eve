# Copyright 2017 Scality
#
# This file is part of Eve.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA  02110-1301, USA.

"""Eve configuration file for buildbot.

This module is the core source code of eve.
It is in fact the configuration file for buildbot.
See the `Buildbot Manual`_ for more informations.

.. _Buildbot Manual:
    http://docs.buildbot.net/latest/manual/index.html

"""
from os.path import expanduser

from buildbot import manhole
from buildbot.plugins import util

from eve.patch.bitbucket_webhook import patch as patch_bitbucket_webhook
from eve.patch.buildstep_interpolation import patch as patch_interpol_step_name
from eve.patch.unicode_source_diff import patch as patch_unicode_source_diff
from eve.patch.worker_retry import patch as patch_failed_worker_retry
from eve.setup.bootstrap import bootstrap_builder
from eve.setup.builders import triggerable_builder
from eve.setup.git_poller import git_poller
from eve.setup.local_jobs import local_jobs
from eve.setup.misc import (properties, protocols, register_starttime,
                            verify_docker_certificates, wamp)
from eve.setup.reporters import (bitbucket_reporter, github_reporter,
                                 hipchat_reporter)
from eve.setup.schedulers import (any_branch_scheduler, force_scheduler,
                                  triggerable_scheduler, try_scheduler)
from eve.setup.secrets import secrets
from eve.setup.workers import docker_workers, local_workers, openstack_workers
from eve.setup.www import auth, authz, www

##########################
# Settings
##########################
util.load_env([
    ('ARTIFACTS_PREFIX', 'staging-'),
    ('ARTIFACTS_URL',),
    ('BOOTSTRAP_BUILDER_NAME', 'bootstrap'),
    ('BOOTSTRAP_SCHEDULER_NAME', 'bootstrap-scheduler'),
    ('CLOUDFILES_URL',),
    ('CLOUD_INIT_SCRIPT', ''),
    ('CODECOV_IO_BASE_URL', 'https://codecov.io'),
    ('CODECOV_IO_UPLOAD_TOKEN', ''),
    ('DB_URL', 'sqlite:///state.sqlite'),
    ('DEBUG_MODE', '0', int),
    ('DOCKER_API_VERSION',),
    ('DOCKER_BUILDER_PREFIX', 'docker'),
    ('DOCKER_CERT_PATH', ''),
    ('DOCKER_CONTAINER_MAX_CPU', '1', int),
    ('DOCKER_CONTAINER_MAX_MEMORY', '4G'),
    ('DOCKER_HOST', ''),
    ('DOCKER_REGISTRY_URL', ''),
    ('DOCKER_SCHEDULER_PREFIX', 'docker'),
    ('DOCKER_TLS_VERIFY', '0', int),
    ('EVE_GITHOST_LOGIN', ''),
    ('EVE_GITHOST_PWD', ''),
    ('EXTERNAL_PB_PORT', ''),
    ('EXTERNAL_URL',),
    ('FORCE_BUILD_PARAM_COUNT', '0', int),
    ('FORCE_SCHEDULER_NAME', 'force'),
    ('GITCACHE_HOSTNAME', 'gitcache'),
    ('GITCACHE_IN_USE', '0', int),
    ('GITHUB_CONTEXT_STATUS', 'pre-merge'),
    ('GITHUB_TOKEN', ''),
    ('GIT_HOST',),
    ('GIT_OWNER',),
    ('GIT_POLLING', '0', int),
    ('GIT_REPO',),
    ('GIT_SLUG',),
    ('HIDE_INTERNAL_STEPS', '1', int),
    ('HIPCHAT_ROOM', ''),
    ('HIPCHAT_TOKEN', ''),
    ('HTTP_PORT', 8999),
    ('IS_PRODUCTION', '0', int),
    ('LOCAL_BUILDER_PREFIX', 'local'),
    ('LOCAL_JOBS_DIRPATH', 'local'),
    ('LOCAL_SCHEDULER_PREFIX', 'local'),
    ('MANHOLE_IN_USE', '0', int),
    ('MANHOLE_LOGIN', 'eve'),
    ('MANHOLE_PASSWORD', 'eve'),
    ('MANHOLE_PORT', '12345', int),
    ('MASTER_FQDN',),
    ('MASTER_MODE', 'standalone'),
    ('MAX_DOCKER_WORKERS', '24', int),
    ('MAX_LOCAL_WORKERS', '2', int),
    ('MAX_OPENSTACK_WORKERS', '20', int),
    ('NGROK', ''),
    ('NO_NEW_BUILD_FILE_PATH', ''),
    ('OAUTH2_CLIENT_ID', ''),
    ('OAUTH2_CLIENT_SECRET', ''),
    ('OAUTH2_GROUP', ''),
    ('OAUTH2_PROVIDER', ''),
    ('OPENSTACK_BUILDER_PREFIX', 'openstack'),
    ('OPENSTACK_SCHEDULER_PREFIX', 'openstack'),
    ('OS_AUTH_URL', ''),
    ('OS_KEY_NAME', ''),
    ('OS_REGION_NAME', ''),
    ('OS_SSH_KEY', '~/.ssh/id_rsa', expanduser),
    ('OS_TENANT_NAME', ''),
    ('OS_USERNAME', ''),
    ('PATCHER_FILE_PATH', ''),
    ('PB_PORT', 9999),
    ('PROJECT_URL',),
    ('PROJECT_YAML', 'build/main.yml'),
    ('RAX_LOGIN', ''),
    ('RAX_PWD', ''),
    ('SECRET_ARTIFACT_CREDS',),
    ('SECRET_OS_PASSWORD', ''),
    ('SENTRY_DSN', ''),
    ('SUFFIX',),
    ('TRY_PORT', '7999'),
    ('TRY_PWD', 'eve'),
    ('TRY_SCHEDULER_NAME', 'try'),
    ('VAULT_IN_USE', '0', int),
    ('VAULT_TOKEN', ''),
    ('VAULT_URL', ''),
    ('WAMP_REALM',),
    ('WAMP_ROUTER_URL', ''),
    ('WWW_PLAIN_LOGIN', ''),
    ('WWW_PLAIN_PASSWORD', ''),
])

# additional, constructed settings
util.env['LOCAL_BUILDER_NAME'] = '-'.join(
    [util.env.LOCAL_BUILDER_PREFIX, util.env.SUFFIX])
util.env['DOCKER_BUILDER_NAME'] = '-'.join(
    [util.env.DOCKER_BUILDER_PREFIX, util.env.SUFFIX])
util.env['OPENSTACK_BUILDER_NAME'] = '-'.join(
    [util.env.OPENSTACK_BUILDER_PREFIX, util.env.SUFFIX])

util.env['LOCAL_SCHEDULER_NAME'] = '-'.join(
    [util.env.LOCAL_SCHEDULER_PREFIX, util.env.SUFFIX])
util.env['DOCKER_SCHEDULER_NAME'] = '-'.join(
    [util.env.DOCKER_SCHEDULER_PREFIX, util.env.SUFFIX])
util.env['OPENSTACK_SCHEDULER_NAME'] = '-'.join(
    [util.env.OPENSTACK_SCHEDULER_PREFIX, util.env.SUFFIX])

if not util.env.EXTERNAL_PB_PORT:
    util.env['EXTERNAL_PB_PORT'] = util.env.PB_PORT

if util.env.DEBUG_MODE:
    util.env['HIDE_INTERNAL_STEPS'] = 0
    util.env['MANHOLE_IN_USE'] = 1

##########################
# Init
##########################
CONF = BuildmasterConfig = {}  # pylint: disable=invalid-name
CONF['workers'] = []
CONF['schedulers'] = []
CONF['builders'] = []
CONF['services'] = []

##########################
# Project Identity
##########################
CONF['title'] = "the %s/%s/%s project" % (
    util.env.GIT_HOST, util.env.GIT_OWNER, util.env.GIT_SLUG)
CONF['titleURL'] = util.env.PROJECT_URL
CONF['buildbotURL'] = util.env.EXTERNAL_URL

###########################
# Database
###########################
CONF['db'] = {'db_url': util.env.DB_URL}

###########################
# VAULT
###########################
if util.env.VAULT_IN_USE:
    CONF['secretsProviders'] = secrets()

##########################
# Multi Master
##########################
if util.env.MASTER_MODE != 'standalone':
    CONF['multiMaster'] = True
    CONF['mq'] = wamp()

##########################
# Protocols
##########################
CONF['protocols'] = protocols()

##########################
# Local Workers
##########################
_local_workers = local_workers()
CONF['workers'].extend(_local_workers)

##########################
# Sentry Logging
##########################
util.init_sentry_logging()

#########################
# Enable local jobs
#########################
_builders, _schedulers = local_jobs(_local_workers)
CONF['schedulers'].extend(_schedulers)
CONF['schedulers'].append(
    triggerable_scheduler(util.env.LOCAL_SCHEDULER_NAME,
                          util.env.LOCAL_BUILDER_NAME))
CONF['schedulers'].append(
    triggerable_scheduler(util.env.DOCKER_SCHEDULER_NAME,
                          util.env.DOCKER_BUILDER_NAME))
CONF['schedulers'].append(
    triggerable_scheduler(util.env.OPENSTACK_SCHEDULER_NAME,
                          util.env.OPENSTACK_BUILDER_NAME))


CONF['builders'].extend(_builders)

###########################
# Misc.
###########################
CONF['buildbotNetUsageData'] = None
CONF['collapseRequests'] = False
# lz4 is the fastest compression algorithm supported by buildbot
CONF['logCompressionMethod'] = 'lz4'
if util.env.MANHOLE_IN_USE:
    CONF['manhole'] = manhole.TelnetManhole(
        util.env.MANHOLE_PORT,
        util.env.MANHOLE_LOGIN,
        util.env.MANHOLE_PASSWORD
    )
patch_unicode_source_diff()

###########################
# Frontend/Symmetric
###########################
if util.env.MASTER_MODE in ('frontend', 'symmetric', 'standalone'):
    ##########################
    # Web UI
    ##########################
    CONF['www'] = www()
    CONF['www']['auth'] = auth()
    CONF['www']['authz'] = authz()

    ##########################
    # Change Sources
    ##########################
    CONF['change_source'] = git_poller()

    ##########################
    # Register schedulers
    ##########################
    CONF['schedulers'].append(any_branch_scheduler())
    CONF['schedulers'].append(force_scheduler())
    CONF['schedulers'].append(try_scheduler())

    ##########################
    # Hacks/Bugfixes
    ##########################
    patch_bitbucket_webhook()

###########################
# Backend/Symmetric
###########################
if util.env.MASTER_MODE in ('backend', 'symmetric', 'standalone'):

    register_starttime()

    ##########################
    # Register additional workers
    ##########################
    verify_docker_certificates()
    _docker_workers = docker_workers()
    CONF['workers'].extend(_docker_workers)

    _openstack_workers = openstack_workers()
    CONF['workers'].extend(_openstack_workers)

    ##########################
    # Register bootstrap builder
    ##########################
    CONF['builders'].append(bootstrap_builder(_local_workers))

    ##########################
    # Register triggerable builders
    ##########################
    CONF['builders'].append(
        triggerable_builder(util.env.LOCAL_BUILDER_NAME,
                            _local_workers))

    CONF['builders'].append(
        triggerable_builder(util.env.DOCKER_BUILDER_NAME,
                            _docker_workers))
    CONF['builders'].append(
        triggerable_builder(util.env.OPENSTACK_BUILDER_NAME,
                            _openstack_workers))

    ##########################
    # Reporters
    ##########################
    if util.env.IS_PRODUCTION:
        if util.env.GIT_HOST == 'bitbucket':
            CONF['services'].append(bitbucket_reporter())

        if util.env.GIT_HOST == 'github':
            CONF['services'].append(github_reporter())

    if util.env.HIPCHAT_ROOM:
        CONF['services'].append(hipchat_reporter())

    ##########################
    # Set global properties
    ##########################
    CONF['properties'] = properties()

    ##########################
    # Hacks/Bugfixes
    ##########################
    patch_interpol_step_name()
    patch_failed_worker_retry()
