heat_template_version: 2013-05-23

description: Simple template to deploy a single buildbot worker

parameters:
  image:
    type: string
    label: Image
    description: Image
  flavor:
    type: string
    label: Flavor
    description: Flavor
  key_name:
    type: string
    label: Key name
    description: Key name
  script_boot:
    type: string
    label: Boot script
    description: Internal boot script
    default: ""
  script_init:
    type: string
    label: Init script
    description: Initialization script
    default: ""
  script_requirements:
    type: string
    label: Requirements script
    description: Requirements script
    default: ""
  script_start:
    type: string
    label: Start buildbot worker script
    description: Start script
    default: ""
  worker_version:
    type: string
    label: Worker version
    description: Buildbot worker version
  network_public:
    type: string
    label: Public network ID
    description: Public network to attach instance to.
  network_private:
    type: string
    label: Private network name or ID
    description: Private network to attach instance to.
  master_fqdn:
    type: string
    label: Master address
    description: Callback address of master (fqdn).
  master_port:
    type: string
    label: Master port
    description: Callback address of master (port).
  worker_name:
    type: string
    label: Worker name
    description: Credential of the Buildbot worker (name)
  worker_password:
    type: string
    label: Worker password
    description: Credential of the Buildbot worker (password)
  redhat_username:
    type: string
    label: RedHat username
    description: RedHat username used for subscription-manager
    default: ""
  redhat_password:
    type: string
    label: RedHat password
    description: RedHat password used for subscription-manager
    hidden: True
    default: ""
  redhat_pool:
    type: string
    label: RedHat pool ID
    description: RedHat pool ID to attach to
    hidden: True
    default: ""
  redhat_org:
    type: string
    label: RedHat ORG ID
    description: RedHat ORG ID used for Activation Key
    hidden: True
    default: ""
  redhat_activationkey:
    type: string
    label: RedHat Activationkey
    description: RedHat Activationkey to use with ORG ID
    hidden: True
    default: ""

resources:
  heat_worker:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - network: {get_param: network_public}
        - network: {get_param: network_private}
      config_drive: "true"
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
                #!/bin/bash
                set -o xtrace -o errexit -o nounset -o pipefail

                function retry {
                  local n=1
                  local max=5
                  local delay=30
                  echo "Running this command with retry ($max attempts, $delay seconds delay):"
                  echo "'$@'"
                  while true; do
                  echo "Attempt $n/$max:"
                  "$@" && break || {
                    if [[ $n -lt $max ]]; then
                      ((n++))
                      echo "Command failed. Sleeping $delay seconds." >&2
                      sleep $delay;
                    else
                      echo "The command has failed after $n attempts." >&2
                      exit 1
                    fi
                  }
                  done
                  echo "The command has succeeded."
                }

                # prepare scripts
                cat << 'EOF0' | head -c -1 > /tmp/script_boot.sh
                $script_boot
                EOF0
                chmod u+x /tmp/script_boot.sh

                cat << 'EOF1' | head -c -1 > /tmp/script_init.sh
                $script_init
                EOF1
                chmod u+x /tmp/script_init.sh

                cat << 'EOF2' | head -c -1 > /tmp/script_requirements.sh
                $script_requirements
                EOF2
                chmod u+x /tmp/script_requirements.sh

                cat << 'EOF3' | head -c -1 > /tmp/script_start.sh
                $script_start
                EOF3
                chmod u+x /tmp/script_start.sh

                # execute scripts
                /tmp/script_boot.sh

                # If it is a RedHat Server
                if [[ -f /etc/redhat-release ]] \
                  && rpm -qa | grep -qE '^redhat-release.+'; then
                    export REDHAT_USERNAME="$redhat_username"
                    export REDHAT_PASSWORD="$redhat_password"
                    export REDHAT_POOL="$redhat_pool"
                    export REDHAT_ORG="$redhat_org"
                    export REDHAT_ACTIVATIONKEY="$redhat_activationkey"
                    if [[ -n "$REDHAT_ORG" \
                          && -n "$REDHAT_ACTIVATIONKEY" ]]; then
                        subscription-manager register \
                            --org="$REDHAT_ORG" \
                            --activationkey="$REDHAT_ACTIVATIONKEY"
                    elif [[ -n "$REDHAT_USERNAME" \
                            && -n "$REDHAT_PASSWORD" ]]; then
                        register_cmd=(
                            subscription-manager register
                            --username="$REDHAT_USERNAME"
                            --password="$REDHAT_PASSWORD"
                        )
                        if [[ -n "$REDHAT_POOL" ]]; then
                            "${register_cmd[@]}"
                            subscription-manager attach \
                                --pool="$redhat_pool"
                        else
                           register_cmd+=(--auto-attach)
                            "${register_cmd[@]}"
                        fi
                    else
                        cat <<EOF
                This system won't be registered
                You can register this system by setting the following
                combination of environment variables in your worker step
                * REDHAT_USERNAME and REDHAT_PASSWORD (with possibly REDHAT_POOL)
                * REDHAT_ORG and REDHAT_ACTIVATIONKEY
                EOF
                    fi
                fi

                /tmp/script_init.sh "$worker_version"
                retry /tmp/script_requirements.sh
                /tmp/script_start.sh \
                    "$master_fqdn" "$master_port" \
                    "$worker_name" "$worker_password"

          params:
            "$master_fqdn": {get_param: master_fqdn}
            "$master_port": {get_param: master_port}
            "$script_boot": {get_param: script_boot}
            "$script_init": {get_param: script_init}
            "$script_requirements": {get_param: script_requirements}
            "$script_start": {get_param: script_start}
            "$worker_name": {get_param: worker_name}
            "$worker_password": {get_param: worker_password}
            "$worker_version": {get_param: worker_version}
            "$redhat_username": {get_param: redhat_username}
            "$redhat_password": {get_param: redhat_password}
            "$redhat_pool": {get_param: redhat_pool}
            "$redhat_org": {get_param: redhat_org}
            "$redhat_activation": {get_param: redhat_activationkey}
