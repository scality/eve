#!/usr/bin/env python
# coding: utf-8
"""Eve configuration file for buildbot.

This module is the core source code of eve.
It is in fact the configuration file for buildbot.
See the `Buildbot Manual`_ for more informations.

.. _Buildbot Manual:
    http://docs.buildbot.net/latest/manual/index.html
"""

from collections import OrderedDict
import json
from os import environ
import socket
import subprocess
import time

from buildbot.changes.gitpoller import GitPoller
from buildbot.process import buildrequest
from buildbot.worker.local import LocalWorker
from buildbot.www.auth import UserPasswordAuth
from buildbot.www.authz import Authz
import buildbot.www.authz.endpointmatchers as bb_endpointmatchers
from buildbot.www.hooks import bitbucket
from buildbot.www.oauth2 import GoogleAuth
from twisted.internet import defer
from twisted.internet.threads import deferToThread
from twisted.python import log

from common import filter_secrets, get_local_jobs
from sentry import init_sentry_logging
from wamp import get_wamp_conf

import authz.endpointmatchers as eve_endpointmatchers
import authz.roles as eve_roles


##########################
# Constants
##########################
BOOTSTRAP_BUILDER_NAME = 'bootstrap'
EVE_GIT_POLLING = False


##########################
# Set/Check environment variables
##########################

filter_secrets()

# git
GIT_REPO = environ.pop('GIT_REPO')

EXTERNAL_URL = environ.get('EXTERNAL_URL')


# bitbucket
EVE_BITBUCKET_LOGIN = environ.pop('EVE_BITBUCKET_LOGIN')
EVE_BITBUCKET_PWD = environ.pop('EVE_BITBUCKET_PWD')

BITBUCKET_PUB_KEY = environ.get('BITBUCKET_PUB_KEY', None)

OAUTH2_CLIENT_ID = environ.pop('OAUTH2_CLIENT_ID', None)
OAUTH2_CLIENT_SECRET = environ.pop('OAUTH2_CLIENT_SECRET', None)

PROJECT_NAME = environ.pop('PROJECT_NAME')
PROJECT_URL = environ.pop('PROJECT_URL')

TRY_PWD = environ.pop('TRY_PWD')

# database
DB_URL = environ.pop('DB_URL', 'sqlite:///state.sqlite')

# artifacts
CLOUDFILES_URL = environ.pop(
    'CLOUDFILES_URL',
    'https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_984990/')
ARTIFACTS_URL = environ.pop(
    'ARTIFACTS_URL',
    'https://artifacts.devsca.com/builds')

ARTIFACTS_PREFIX = environ.pop('ARTIFACTS_PREFIX', 'staging-')

ARTIFACTS_LOGIN = environ.pop('ARTIFACTS_LOGIN', None)
ARTIFACTS_PWD = environ.pop('ARTIFACTS_PWD', None)

MASTER_START_TIME = time.time()


##########################
# Project Identity
##########################
EVE_CONF = BuildmasterConfig = OrderedDict()  # pylint: disable=invalid-name
EVE_CONF['title'] = "the %s project" % PROJECT_NAME
EVE_CONF['titleURL'] = PROJECT_URL
EVE_CONF['buildbotURL'] = EXTERNAL_URL

##########################
# Multi Master
##########################
WAMP_ROUTER_URL = environ.pop('WAMP_ROUTER_URL')
WAMP_REALM = environ.pop('WAMP_REALM')
EVE_CONF['multiMaster'] = True
EVE_CONF['mq'] = get_wamp_conf(WAMP_ROUTER_URL, WAMP_REALM)

##########################
# HipChat Configuration
##########################
REPO_ICON = 'http://www.packal.org/sites/default/files/public/styles/icon_' \
            'large/public/workflow-files/netdeanishealfred-git-repos/icon/' \
            'icon.png?itok=1zkuMgPa'
BRANCH_ICON = 'http://plainicon.com/dboard/userprod/2800_a1826/prod_thumb/' \
              'plainicon.com-50219-512px-201.png'
CLOCK_ICON = 'https://image.freepik.com/free-icon/clock-of-circular-shape-at' \
             '-two-o-clock_318-48022.jpg'

# Prefix of cleanup-docker jobs used in all backends
CLEANUP_DOCKER_BUILDER_NAME_PREFIX = "cleanup-docker-"

#########################################
# HACK: Replace default bitbucket webhook
# #######################################

def getChanges(request, options=None):
    """Catch a POST request from BitBucket and start a build process

    Check the URL below if you require more information about payload
    https://confluence.atlassian.com/display/BITBUCKET/POST+Service+Management

    :param request: the http request Twisted object
    :param options: additional options
    """

    log.msg('Processing changes from bitbucket')
    payload = json.loads(request.content.read())
    repo_url = payload['repository']['links']['html']['href']
    log.msg("repo_url:", repo_url)
    project = payload['repository']['project']['name']

    changes = []
    commits = set()
    for change in payload['push']['changes']:
        new = change.get('new', None)
        if new is None:
            continue
        if new['type'] != u'branch':
            continue
        log.msg('found branch change!')
        target = new['target']

        if target['hash'] in commits:
            # FIXME: temporary fix to have only one build per commit
            log.msg('skipping branch %s: commit %s already '
                    'scheduled for building' % (new['name'], target['hash']))
            continue

        commits.add(target['hash'])
        change = {
            'author': target['author']['raw'],
            'branch': new['name'],
            'files': [],
            'comments': target['message'],
            'revision': target['hash'],
            'revlink': target['links']['html']['href'],
            'repository': repo_url,
            'project': project
        }
        log.msg(change)

        changes.append(change)

    return (changes, payload['repository']['scm'])


bitbucket.getChanges = getChanges

###########################
# Web UI
###########################

if OAUTH2_CLIENT_ID and OAUTH2_CLIENT_SECRET:
    www_auth = GoogleAuth(OAUTH2_CLIENT_ID,
                          OAUTH2_CLIENT_SECRET)
else:
    www_auth = UserPasswordAuth({"eve": "eve"})

EVE_CONF['www'] = dict(
    port=environ['HTTP_PORT'],
    plugins={},
    auth=www_auth,
    change_hook_dialects={'bitbucket': True},
    debug=True,
)

EVE_CONF['www']['authz'] = Authz(
    allowRules=[
        eve_endpointmatchers.DenyRebuildBuildEndpointMatcher(
            allow_builders=[
                BOOTSTRAP_BUILDER_NAME,
                "{0}*".format(CLEANUP_DOCKER_BUILDER_NAME_PREFIX),
            ],
            role='developer'  # This parameter is not necessary,
                              #   the next rule will deny access.
        ),
        bb_endpointmatchers.AnyEndpointMatcher(role='developer'),
    ],
    roleMatchers=[
        eve_roles.DeveloperRoleIfConnected()
    ]
)

# DB URL
EVE_CONF['db'] = {
    'db_url': DB_URL,
}

###########################
# Misc.
###########################

EVE_CONF['buildbotNetUsageData'] = None


##########################
# Change Sources
##########################
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

EVE_CONF['change_source'] = []
if EVE_GIT_POLLING:
    EVE_CONF['change_source'].append(GitPoller(
        GIT_REPO,
        workdir='gitpoller-workdir',
        branches=True,
        pollinterval=900,
        pollAtLaunch=False,
        buildPushesWithNoCommits=True,
    ))


# #########################
# Collapsing requests
# #########################
EVE_CONF['collapseRequests'] = False


class TempSourceStamp(object):
    """ This is a Hack to fix a bug where the git diff is sent as an str
    instead of unicode and triggers an exception
    """

    def asDict(self):  # pylint: disable=invalid-name,missing-docstring
        result = vars(self).copy()
        del result['ssid']
        del result['changes']
        if 'patch' in result and result['patch'] is None:
            result['patch'] = (None, None, None)
        result['patch_level'], result['patch_body'], result[
            'patch_subdir'] = result.pop('patch')
        result['patch_author'], result[
            'patch_comment'] = result.pop('patch_info')
        assert all(
            isinstance(val, (str, unicode, type(None), int))  # added str here
            for attr, val in result.items()
        ), result
        return result

buildrequest.TempSourceStamp = TempSourceStamp


# #########################
# Sentry Logging
# #########################

SENTRY_DSN = environ.pop('SENTRY_DSN', None)
if SENTRY_DSN:
    init_sentry_logging(SENTRY_DSN)


# #########################
# Bootstrap Sequence: Schedulers
# #########################
BOOTSTRAP_SCHEDULER_NAME = 'bootstrap-scheduler'
from buildbot.plugins import util
from buildbot.scheduler import AnyBranchScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.trysched import Try_Userpass


class EveForceScheduler(ForceScheduler):

    @defer.inlineCallbacks
    def gatherPropertiesAndChanges(self, collector, **kwargs):
        d = super(EveForceScheduler, self).gatherPropertiesAndChanges(
            collector, **kwargs)
        properties, changeids, sourcestamps = yield d

        yield deferToThread(self.add_missing_revisions, sourcestamps)

        defer.returnValue((properties, changeids, sourcestamps))

    def add_missing_revisions(self, sourcestamps):
        for _, sourcestamp in sourcestamps.iteritems():
            if not sourcestamp['revision']:
                # Retrieve revision from branch for sourcestamps without one
                sourcestamp['revision'] = subprocess.check_output(
                    ['git', 'ls-remote', GIT_REPO, sourcestamp['branch']],
                    stderr=subprocess.PIPE,
                ).split()[0]


EVE_CONF['schedulers'] = []
EVE_CONF['schedulers'].append(AnyBranchScheduler(
    name=BOOTSTRAP_SCHEDULER_NAME,
    treeStableTimer=5,
    change_filter=ChangeFilter(branch_re='.+'),  # build only branches
    builderNames=[BOOTSTRAP_BUILDER_NAME]))

EVE_CONF['schedulers'].append(EveForceScheduler(
    name='force',
    builderNames=[BOOTSTRAP_BUILDER_NAME],
    reason=util.StringParameter(name='reason',
                                label='Reason:',
                                default='force build',
                                size=20),
    codebases=[
        util.CodebaseParameter(
            '',
            branch=util.StringParameter(name='branch',
                                        label='Branch:',
                                        required=True),
            revision=util.FixedParameter(name='revision',
                                         default=''),
            repository=util.FixedParameter(name='repository',
                                           default=PROJECT_URL),
            project=util.FixedParameter(name='project',
                                        default=PROJECT_NAME),
        )
    ],
))

EVE_CONF['schedulers'].append(Try_Userpass(
    name='try',
    port=environ['TRY_PORT'],
    userpass=[("try", TRY_PWD)],
    builderNames=[BOOTSTRAP_BUILDER_NAME]))


# ########################
# Load local jobs
# ########################
# Create MAX_LOCAL_WORKERS Local Workers that will run extra scheduled jobs
MAX_LOCAL_WORKERS = int(environ.get('MAX_FRONTEND_LOCAL_WORKERS', 2))
MASTER_NAME = environ.pop('MASTER_NAME', 'master')
MASTER_FQDN = environ.pop('MASTER_FQDN')
WORKER_SUFFIX = environ.pop('WORKER_SUFFIX')

LOCAL_WORKERS = []
for i in range(MAX_LOCAL_WORKERS):
    LOCAL_WORKERS.append(LocalWorker('flw%03d-%s' % (i, WORKER_SUFFIX)))

EVE_CONF['builders'] = []
EVE_CONF['workers'] = LOCAL_WORKERS
EVE_CONF['protocols'] = {'pb': {'port': 'tcp:%s:interface=%s' % (
    environ['PB_PORT'], socket.gethostbyname(MASTER_FQDN))}}

extra_builders, extra_schedulers = get_local_jobs(
  LOCAL_WORKERS,
  suffix="-{0}".format(MASTER_NAME)
)
EVE_CONF["builders"] += extra_builders
EVE_CONF["schedulers"] += extra_schedulers
