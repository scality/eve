#!/usr/bin/env python

from __future__ import print_function
import requests
import sys
from os import environ, execve
from time import sleep

local_commands = ['build', 'image', 'images']

def get_command(cmd_list):
    """Extract command from a docker command line."""
    for word in cmd_list:
        if word.startswith('-'):
            continue
        return word
    return ''

def handle_remote(cmd):
    remote = environ.get('DOCKER_HOST', 'localhost:2377')

    try:
        response = requests.put(
            'http://{host}/{cmd}'.format(host=remote, cmd=cmd),
            data=' '.join(sys.argv))
    except requests.ConnectionError:
        sys.exit('The Docker service is currently unavailable.')

    if response.status_code != 202:
        sys.exit('This Docker command is not available on this platform (%s).' % response.status_code)

    task_url = response.headers['Location']

    sleep(0.5)
    for _ in range(300):
        response = requests.get(task_url)
        response.raise_for_status()
        state = response.json()['state']
        if state == 'SUCCESS':
            print(response.json()['output'])
            sys.exit(int(response.json()['retcode']))
        elif state == 'FAILURE':
            sys.exit('internal error')
        sleep(1)

    sys.exit('command timeout')

def handle_local():
    client = environ.get('DOCKER_CLIENT', '/usr/bin/docker')
    env = {}
    if environ.get('DOCKER_SERVER', ''):
        env['DOCKER_HOST'] = environ.get('DOCKER_SERVER')
    if environ.get('DOCKER_API_VERSION', ''):
        env['DOCKER_API_VERSION'] = environ.get('DOCKER_API_VERSION')
    sys.argv[0] = client
    execve(sys.argv[0], sys.argv, env)

cmd = get_command(sys.argv[1:])

if cmd in local_commands:
    handle_local()
else:
    handle_remote(cmd)
