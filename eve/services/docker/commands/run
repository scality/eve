#!/bin/bash

pod_name="${1}"
template="/resource/${pod_name}"

error(){
    POD=$(kubectl delete -f ${template})
    exit 1
}
cleanup() {
    rm -f ${template}
}
trap cleanup EXIT

with_retry() {
    local max_attempts=${ATTEMPTS-360}
    local delay=${DELAY-10}
    local attempt=0
    local exitCode=1

    while [ $attempt -lt $max_attempts ]; do
        "$@" 2>/dev/null
        exitCode=$?
        test $exitCode -eq 0 && break
        test $exitCode -eq 1 && break
        sleep $delay
        attempt=$(( attempt + 1 ))
    done

    return $exitCode
}

get_pod() {
    local name=$(kubectl get pod \
                 --selector name=${pod_name} \
                 --no-headers \
                 --output=custom-columns=ADDRESS:.metadata.name)
    test -z "${name}" && return 2

    local status=$(kubectl get pod \
                   ${name} \
                   --no-headers \
                   --output=custom-columns=ADDRESS:.status.phase)

    test "${status}" = "Running" && pod_name="${name}" && return 0
    test "${status}" = "ContainerCreating" && return 2  # retry later
    test "${status}" = "Pending" && return 2  # retry later
    return 1  # failed
}

# spawn pod
POD=$(kubectl create \
      --no-headers \
      --output=custom-columns=NAME:.metadata.name \
      -f ${template})
test ! $? -eq 0 && error

# wait for pod
with_retry get_pod
test ! $? -eq 0 && error

# return pod name
test -z "${pod_name}" && error
echo "${pod_name//-/+}"
