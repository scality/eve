[tox]
# whitelisting below: no warning with tox --sitepackages (docker cache)
# --no-binary below: install buildbot from source to obtain test modules

[testenv]
basepython = python2.7
deps = -r{toxinidir}/requirements/base.txt
install_command =
  {toxinidir}/pip.sh install --no-binary buildbot {opts} {packages}

[testenv:autoformat]
envdir =
  {toxworkdir}/autoformat
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/autoformat.txt
commands =
  isort --verbose --project eve --recursive --virtual-env {toxworkdir}/{envname} --atomic eve tests setup.py eve/etc/master.cfg
  autoflake --remove-all-unused-imports --remove-unused-variables --recursive --in-place eve tests

[testenv:autoformatcheck]
envdir =
  {toxworkdir}/autoformatcheck
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/autoformat.txt
whitelist_externals =
  bash
commands =
  isort --project eve --recursive --virtual-env {toxworkdir}/{envname} --diff --check-only eve tests setup.py eve/etc/master.cfg

[testenv:flake8]
envdir =
  {toxworkdir}/flake8
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/flake8.txt
whitelist_externals =
  flake8
commands =
  flake8 --config {toxinidir}/.flake8 \
         {posargs:{toxinidir}/eve \
         {toxinidir}/eve/etc/master.cfg \
         {toxinidir}/tests}

[testenv:pydocstyle]
envdir =
  {toxworkdir}/pydocstyle
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/pydocstyle.txt
whitelist_externals =
  pydocstyle
commands =
  pydocstyle eve tests

[testenv:pylint]
envdir =
  {toxworkdir}/pylint
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/pylint.txt
whitelist_externals =
  pylint
commands =
  pylint --errors-only --rcfile {toxinidir}/.pylintrc \
         {posargs:{toxinidir}/eve \
         {toxinidir}/eve/etc/master.cfg \
         {toxinidir}/tests}

[testenv:lint]
envdir =
  {toxworkdir}/lint
deps =
  {[testenv:autoformatcheck]deps}
  {[testenv:flake8]deps}
  {[testenv:pydocstyle]deps}
  {[testenv:pylint]deps}
whitelist_externals =
  {[testenv:autoformatcheck]whitelist_externals}
  {[testenv:flake8]whitelist_externals}
  {[testenv:pydocstyle]whitelist_externals}
  {[testenv:pylint]whitelist_externals}
commands =
  {[testenv:autoformatcheck]commands}
  {[testenv:flake8]commands}
  {[testenv:pydocstyle]commands}
  {[testenv:pylint]commands}

[testenv:unit]
envdir =
  {toxworkdir}/unit
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/unit.txt
setenv =
  PYTHONPATH = {envsitepackagesdir}:{toxinidir}
commands =
  py.test -v --cov=tests.unit --cov=eve --cov-fail-under 56 --cov-report html:.htmlcov/unit {posargs} {toxinidir}/tests/unit

[testenv:testutil]
envdir =
  {toxworkdir}/testutil
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/system_tests.txt
setenv =
  WORKDIR={envtmpdir}
commands =
  py.test -v --cov=tests.util --cov-fail-under 68 --cov-report html:.htmlcov/util {posargs} {toxinidir}/tests/util

[testenv:system]
envdir =
  {toxworkdir}/system
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/system_tests.txt
setenv =
  WORKDIR={envtmpdir}
commands =
  py.test -v --cov=tests.system --cov=eve --cov-fail-under 53 --cov-config tests/system/.coveragerc --cov-report html:.htmlcov/system {posargs} {toxinidir}/tests/system

[testenv:docker]
envdir =
  {toxworkdir}/docker
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/system_tests.txt
setenv =
  WORKDIR={envtmpdir}
commands =
  py.test -v --cov=tests.docker --cov-fail-under 85 --cov-report html:.htmlcov/docker {posargs} {toxinidir}/tests/docker

[testenv:kube]
envdir =
  {toxworkdir}/kube
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/system_tests.txt
setenv =
  WORKDIR={envtmpdir}
commands =
  py.test -v --cov=tests.kube --cov-fail-under 40 --cov-report html:.htmlcov/kube {posargs} {toxinidir}/tests/kube

[testenv:compose-build]
envdir =
  {toxworkdir}/compose-build
deps =
  -r{toxinidir}/requirements/compose.txt
commands =
  docker-compose build

[testenv:compose-up]
envdir =
  {toxworkdir}/compose-up
deps =
  -r{toxinidir}/requirements/compose.txt
commands =
  docker-compose up --build --abort-on-container-exit

[testenv:freeze-requirements]
envdir =
  {toxworkdir}/freeze
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/freeze.txt
commands =
  {toxinidir}/requirements/update.sh requirements
  freeze-requirements freeze -m build/workers/xenial/requirements.txt build/workers/xenial/requirements.in

[testenv:relnotes]
envdir =
  {toxworkdir}/relnotes
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/relnotes.txt
commands =
  towncrier --yes --version={posargs}

[testenv:doc]
envdir =
  {toxworkdir}/doc
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements/documentation.txt
whitelist_externals =
  make
commands =
  make -C {toxinidir}/doc clean
  make -C {toxinidir}/doc html
