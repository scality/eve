"""Eve configuration file for buildbot.

This module is the core source code of eve.
It is in fact the configuration file for buildbot.
See the `Buildbot Manual`_ for more informations.

.. _Buildbot Manual:
    http://docs.buildbot.net/latest/manual/index.html

"""

# pylint: disable=relative-import
from collections import OrderedDict
import socket
from os import environ

from buildbot.plugins import util
from buildbot.worker.local import LocalWorker

from eve.steps.shell_command_with_secrets import filter_secrets
from eve.setup import (
    multimaster, backend_only, frontend_only, local_jobs
)

EVE_CONF = BuildmasterConfig = OrderedDict()  # pylint: disable=invalid-name
##########################
# Constants
##########################
BOOTSTRAP_BUILDER_NAME = 'bootstrap'
MAX_LOCAL_WORKERS = int(environ.get('MAX_LOCAL_WORKERS', 8))


##########################
# Set/Check environment variables
##########################
MASTER_MODE = environ.pop('MASTER_MODE', 'standalone')
MASTER_NAME = environ.pop('MASTER_NAME', 'master')
GIT_REPO = environ.pop('GIT_REPO')
EXTERNAL_URL = environ.get('EXTERNAL_URL')
MASTER_FQDN = environ.pop('MASTER_FQDN')
WORKER_SUFFIX = environ.pop('WORKER_SUFFIX')
PROJECT_NAME = environ.pop('PROJECT_NAME')
PROJECT_URL = environ.pop('PROJECT_URL')
filter_secrets()

##########################
# Project Identity
##########################
EVE_CONF['title'] = "the %s project" % PROJECT_NAME
EVE_CONF['titleURL'] = PROJECT_URL
EVE_CONF['buildbotURL'] = EXTERNAL_URL

###########################
# Database
###########################
DB_URL = environ.pop('DB_URL', 'sqlite:///state.sqlite')
EVE_CONF['db'] = {'db_url': DB_URL}

##########################
# Multi Master
##########################
multimaster.setup_multimaster(EVE_CONF)

##########################
# Protocols
##########################
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol.
# 'port' must match the value configured into the buildworkers (with their
# --master option)
EVE_CONF['protocols'] = {'pb': {'port': 'tcp:%s:interface=%s' % (
    environ['PB_PORT'], socket.gethostbyname(MASTER_FQDN))}}

##########################
# Local Workers
##########################
EVE_CONF['workers'] = []
# Create MAX_LOCAL_WORKERS Local Workers that will:
# - bootstrap all product jobs
# - run extra locally scheduled jobs (setup at init)
LOCAL_WORKERS = []
for i in range(MAX_LOCAL_WORKERS):
    LOCAL_WORKERS.append(LocalWorker('lw%03d-%s' % (i, WORKER_SUFFIX)))
EVE_CONF['workers'].extend(LOCAL_WORKERS)

# #########################
# Sentry Logging
# #########################
SENTRY_DSN = environ.pop('SENTRY_DSN', None)
if SENTRY_DSN:
    util.init_sentry_logging(SENTRY_DSN)

# ########################
# Load local jobs
# ########################
EVE_CONF["builders"], EVE_CONF["schedulers"] = local_jobs.setup_local_jobs(
    LOCAL_WORKERS, MASTER_NAME)


###########################
# Misc.
###########################
EVE_CONF['buildbotNetUsageData'] = None

###########################
# Frontend/Backend/Standalone
###########################
if MASTER_MODE in('frontend', 'standalone'):
    frontend_only.setup_frontend_only(
        EVE_CONF, GIT_REPO, PROJECT_NAME, BOOTSTRAP_BUILDER_NAME)

if MASTER_MODE in('backend', 'standalone'):
    backend_only.setup_backend_only(
        EVE_CONF, MASTER_NAME, MAX_LOCAL_WORKERS, WORKER_SUFFIX,
        MASTER_FQDN, LOCAL_WORKERS, GIT_REPO, PROJECT_NAME,
        BOOTSTRAP_BUILDER_NAME)
