---
version: 0.2

branches:
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*:
    stage: pre-merge

stages:
  pre-merge:
    worker: &focal-worker
      type: kube_pod
      path: build/workers/focal/pod.yaml
      images:
        worker: build/workers/focal
    steps:
      - TriggerStages:
          name: trigger local and remote tests simultaneously
          stage_names:
            - local-tests
            - docker tests
          waitForFinish: True
          haltOnFailure: True
      - ShellCommand:
          name: add successful .final_status to artifacts
          command: >
              mkdir build_status
              && echo -n "SUCCESSFUL" > build_status/.final_status
          haltOnFailure: True
      - ShellCommand:
          name: add failed .final_status to artifacts if needed
          command: >
              [ -f build_status/.final_status ]
              || ( mkdir build_status && echo -n "FAILED" > build_status/.final_status )
          haltOnFailure: True
          alwaysRun: True
      - Upload:
          source: build_status
          alwaysRun: True

  local-tests:
    worker: *focal-worker
    steps:
      - Git:
          name: fetch source
          repourl: '%(prop:git_reference)s'
          shallow: True
          retryFetch: True
      - ShellCommand:
          name: install eve
          command: sudo pip3 install .
          haltOnFailure: True
      - ShellCommand:
          name: run static analysis tools
          command: tox --sitepackages -e lint
          usePTY: true
      - ShellCommand:
          name: Ensure the release notes compile
          command: tox --sitepackages -e relnotes -- test_version
          usePTY: true
      - ShellCommand:
          name: Ensure the doc compiles
          command: tox --sitepackages -e doc
          usePTY: true
      - ShellCommand:
          name: check helm packaging eve
          command: helm lint charts/eve
      - ShellCommand:
          name: check helm packaging eve-cron-builder
          command: helm lint charts/eve-cron-builder
      - ShellCommand:
          name: check helm packaging eve-doc
          command: helm lint charts/eve-doc
      - ShellCommand:
          name: run unit tests
          command: tox --sitepackages -e unit
          usePTY: true
      - ShellCommand:
          name: run system utils tests
          command: tox -e testutil
          usePTY: true
      - ShellCommand:
          name: run system tests
          command: tox --sitepackages -e system
          haltOnFailure: True
          usePTY: true
      - Upload:
          source: .htmlcov
          urls:
            - ['coverage report (unit)', 'unit/index.html']
            - ['coverage report (testutil)', 'util/index.html']
            - ['coverage report (system)', 'system/index.html']
          alwaysRun: True

  docker tests:
    worker:
      type: openstack
      image: focal-server-cloudimg-amd64_2021-04-29
      flavor: general1-8
      path: build/workers/docker_tests
    steps:
      - Git:
          name: fetch source
          repourl: '%(prop:git_reference)s'
          shallow: True
          retryFetch: True
      - ShellCommand: &docker_login
          name: Login to docker registry
          command: >
            docker login
            -u "${DOCKERHUB_LOGIN}"
            -p "${DOCKERHUB_PASSWORD}"
          usePTY: true
          env:
            DOCKERHUB_LOGIN: '%(secret:dockerhub_login)s'
            DOCKERHUB_PASSWORD: '%(secret:dockerhub_password)s'
      - ShellCommand:
          name: run docker-compose build
          command: sudo su eve -c "tox -e compose-build"
          haltOnFailure: True
          usePTY: true
      - ShellCommand:
          name: run docker tests
          command: sudo su eve -c "tox -e docker"
          haltOnFailure: True
          usePTY: true
      - ShellCommand:
          name: run kube tests
          command: sudo su eve -c "tox -e kube"
          haltOnFailure: True
          usePTY: true
      - Upload:
          source: .htmlcov
          urls:
            - ['coverage report (docker)', 'docker/index.html']
          alwaysRun: True
