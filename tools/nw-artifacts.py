#!/usr/bin/env python3.6

"""Access Eve/buildbot API from the command line.

An OAuth token is required. It can be obtained from
the Git host provider by following the documentation in the file githost.py

Invocation examples:

CLI Variables:
    bitbucket-consumer-id: consumer ID generated by bitbucket
    bitbucket-consumer-secret: consumer Secret generated by bitbucket
    github-token: API Token generated by github
    artifacts-repository-username: BasicAuth User for the artifacts repository
        where artifacts to download are located
    artifacts-repository-password: BasicAuth Password for the artifacts
        repository where artifacts to download are located
    JIRA-username: Username to use to acces the JIRA issue tracker to attach
        the artifacts to
    JIRA-password: Password to use to access the JIRA issue tracker to attach
        the artifacts to
    eve-project: URL specification of a eve project (ex: github/scality/zenko,
        bitbucket/scalityring, etc.)
    bootstrap-build-number: Build number of the Boostrap builder (root builder)
    JIRA-issue-number: JIRA Issue reference, containing project and issue
        number (ex: RING-2354)
    builder-name: Name of the builder shown in the Eve UI
    builder-specific-build-number: Build number of build under the specified
        builder.

Attach all artifacts from a build (from a bitbucket project) to a ticket:
    ./nw-artifacts.py
      --auth-client <bitbucket-consumer-id>
      --auth-secret <bitbucket-consumer-secret>
      --artifacts-pass <artifacts-repository-password>
      --jira-user <JIRA-username>
      --jira-pass <JIRA-password>
      <eve-project> <bootstrap-build-number> <JIRA-issue-number>

Attach artifacts from a specific build stage (from a github project) to a
ticket:
    ./nw-artifacts.py
      --auth-token <github-token>
      --artifacts-pass <artifacts-repository-password>
      --jira-user <JIRA-username>
      --jira-pass <JIRA-password>
      --step-name <Name of the step or stage to collect the artifacts from>
      <eve-project> <bootstrap-build-number> <JIRA-issue-number>

Attach artifacts of a build failure from a cancelled bootstrap build to a
ticket:
    ./nw-artifacts.py
      --auth-token <github-token>
      --artifacts-pass <artifacts-repository-password>
      --jira-user <JIRA-username>
      --jira-pass <JIRA-password>
      --builder <builder-name>
      <eve-project> <builder-specifci-build-number> <JIRA-issue-number>

Report any bug/error at release.engineering@scality.com
"""

import argparse
from jira import JIRA
import logging
# import sys
import os
import requests
from requests.auth import HTTPBasicAuth
import tempfile
import time
import sys

from eve_client import EveClient
from githost import getProvider, guessProvider
from utils import EnvDefault

logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)


def collect_step_artifacts(tree, stepname, collect=False):
    if (not stepname
            or ('step' in tree and tree['step'] == stepname)
            or ('stage' in tree and tree['stage'] == stepname)):
        collect = True

    artifacts = []
    if collect is True:
        artifacts += tree['artifacts']
    for url, build in tree['builds'].items():
        artifacts += collect_step_artifacts(build, stepname, collect)
    return artifacts


def extract_name(url, dir_parts=0):
    name = os.path.basename(url)
    dir = os.path.dirname(url)
    for i in range(dir_parts):
        name = os.path.basename(dir) + '_' + name
        dir = os.path.dirname(dir)
    return name


def sanitize_names(urls):
    """ Transform a set of urls into a set of the smallest names possible
        extracted from the urls.

        If two names match, then all of them are prepended with one additional
        parent folder name from the URL.
    """
    sanitized_names = []
    dir_parts = 0
    while len(set(sanitized_names)) != len(urls):
        sanitized_names = [extract_name(url, dir_parts) for url in urls]
        dir_parts += 1
    return sanitized_names


if __name__ == '__main__':

    parser = argparse.ArgumentParser('Download NW failure artifacts and '
                                     'reattach them to the relevant issue')
    parser.add_argument('--auth-client', '-u',
                        help='Consumer client id (if applicable). '
                             'Can also be set with environment variable '
                             'EVE_API_CLIENT_ID.',
                        action=EnvDefault, envvar='EVE_API_CLIENT_ID')
    parser.add_argument('--auth-secret', '-p',
                        help='Consumer client secret (if applicable). '
                             'Can also be set with environment variable '
                             'EVE_API_CLIENT_SECRET.',
                        action=EnvDefault, envvar='EVE_API_CLIENT_SECRET')
    parser.add_argument('--auth-token', '-t',
                        help='Git host authentication token. '
                             'Can also be set with environment variable '
                             'EVE_API_TOKEN.',
                        action=EnvDefault, envvar='EVE_API_TOKEN',
                        default='')
    parser.add_argument('--base-url', '-b',
                        help='Eve base url. '
                             'Can also be set with environment variable '
                             'EVE_API_HOST.',
                        action=EnvDefault, envvar='EVE_API_HOST',
                        default='https://eve.devsca.com')
    parser.add_argument('--api-version', '-v',
                        help='API version to use (defaults to v2). '
                             'Can also be set with environment variable '
                             'EVE_API_VERSION.',
                        action=EnvDefault, envvar='EVE_API_VERSION',
                        metavar='INT', type=int,
                        default=2)
    parser.add_argument('--artifacts-user', '-a',
                        help='Eve Artifacts repository User. '
                             'Can also be set with environment variable '
                             'ARTIFACTS_USERNAME.',
                        action=EnvDefault, envvar='ARTIFACTS_USERNAME',
                        default='developer')
    parser.add_argument('--artifacts-pass', '-k',
                        help='Eve Artifacts repository Password. '
                             'Can also be set with environment variable '
                             'ARTIFACTS_PASSWORD.',
                        action=EnvDefault, envvar='ARTIFACTS_PASSWORD',
                        default=None)
    parser.add_argument('--jira-user', '-U',
                        help='JIRA User. '
                             'Can also be set with environment variable '
                             'JIRA_USERNAME.',
                        action=EnvDefault, envvar='JIRA_USERNAME')
    parser.add_argument('--jira-pass', '-P',
                        help='JIRA Password. '
                             'Can also be set with environment variable '
                             'JIRA_PASSWORD.',
                        action=EnvDefault, envvar='JIRA_PASSWORD')
    parser.add_argument('--step-name', '-s',
                        help='Name of the step/stage to collect '
                             'the artifacts for. Artifacts of all builds or '
                             'steps triggered by this step will be collected.',
                        default=None)
    parser.add_argument('--builder', '-B',
                        help='ID of the builder that owns the specified build'
                        ' number. Defaults to "bootstrap", but can be'
                        ' overriden to cover for the case of un-browsable'
                        ' builds (such as cancelled builds)',
                        default='bootstrap')
    parser.add_argument('eve_project', help='Eve project name')
    parser.add_argument('build_id', help='Eve bootstrap build number')
    parser.add_argument('jira_issue', help='Jira issue ID')
    args = parser.parse_args()

    jira = {
        'user': args.jira_user,
        'password': args.jira_pass,
        'issue': args.jira_issue,
    }
    authparams = {
        'client_id': args.auth_client,
        'client_secret': args.auth_secret,
        'token': args.auth_token,
        'artifacts_user': args.artifacts_user,
        'artifacts_pass': args.artifacts_pass,
    }
    build = {
        'url': '{}/{}'.format(args.base_url, args.eve_project),
        'project': args.eve_project,
        'id': args.build_id,
    }

    auth_eve_set = ((authparams['client_id'] is not None
                     and authparams['client_secret'] is not None)
                    or authparams['token'] is not None)
    auth_artifacts_set = (authparams['artifacts_user'] is not None
                          and authparams['artifacts_pass'] is not None)
    auth_jira_set = (jira['user'] is not None
                     and jira['password'] is not None)
    logging.info('Eve authentication {}: {}trying to inspect build'
                 .format(['unset', 'set'][auth_eve_set],
                         ['not ', ''][auth_eve_set]))
    logging.info('Artifacts authentication {}: {}trying to download artifacts'
                 .format(['unset', 'set'][auth_artifacts_set],
                         ['not ', ''][auth_artifacts_set]))
    logging.info('JIRA authentication {}: {}trying to upload attachments'
                 .format(['unset', 'set'][auth_jira_set],
                         ['not ', ''][auth_jira_set]))

    if not auth_eve_set:
        sys.exit()

    githost = guessProvider('auto', None, build['project'])
    provider = getProvider(githost, **authparams)
    eve = EveClient(provider.token, build['url'])
    logging.info('Building tree of builds and artifacts...')
    start_building = time.time()
    buildtree = eve.buildtree(args.builder, build['id'])
    end_building = time.time()
    spent_building = end_building - start_building
    logging.debug('Spend {}s retrieving the build tree'.format(spent_building))

    artifacts = collect_step_artifacts(buildtree, args.step_name)
    logging.info('Collecting artifacts:')
    for artifact in artifacts:
        logging.info(' - {}'.format(artifact))

    # Ensure that no two basenames are identical
    sanitized_names = sanitize_names(artifacts)
    for fname, url in zip(sanitized_names, artifacts):
        logging.info('Generating attachment "{}"\n\t-> "{}"'
                     .format(fname, url))

    if not auth_artifacts_set:
        sys.exit()
    # Prepare JIRA object
    j = JIRA("https://scality.atlassian.net",
             basic_auth=(jira['user'], jira['password']))
    # Prepare auth
    artifacts_auth = HTTPBasicAuth(authparams['artifacts_user'],
                                   authparams['artifacts_pass'])
    # Download the relevant artifacts into a temp dir
    with tempfile.TemporaryDirectory() as tmpdir:
        for fname, url in zip(sanitized_names, artifacts):
            logging.info('Processing attachment "{}"...'.format(fname))
            logging.info('Downloading...')
            filename = os.path.join(tmpdir, fname)
            r = requests.get(url, allow_redirects=True, auth=artifacts_auth)
            if not r.ok:
                sys.exit('Could not retrieve the artifacts successfully: '
                         'HTTP {}: {}'.format(r.status_code, r.reason))
            with open(filename, 'wb') as f:
                f.write(r.content)
            logging.info('Download status {}'.format(r.status_code))
            if auth_jira_set:
                logging.info('Uploading...')
                j.add_attachment(jira['issue'], attachment=filename)
            logging.info('{} processing finished.'.format(fname))
