#! /usr/bin/env python2
"""Use this script to access Eve/buildbot API from the
command line. To look for help run please run:

    eve_api_client --help

An OAuth consumer key is required. It can be obtained from
the Git host provider:

Bitbucket:
Go to https://bitbucket.org/account/user/<your_username>/api
and create a new consumer with the following settings:
- permissions:
    - account: READ access
    - team membership: READ access
- callback URL: address of eve (it does not really matter)

Github:
Go to https://github.com/settings/tokens
and create a new token with the following settings:
- description: eve-api-client
- scopes: user (read:user, user:email and user:follow)

You will be asked to authorize the new consumer on the first call.

Examples:

List builders:
    eve_api_client \
      --username <username> \
      --password <password> \
      --consumer-key <key> \
      --base-url <url of eve> \
      /builders

Force a build:
    eve_api_client \
      --username <username> \
      --password <password> \
      --consumer-key <key> \
      --base-url <url of eve> \
      --httpmethod post \
      --payload '{"branch": "development/6.4"}' \
      /forceschedulers/force

Force a build with parameters:
    eve_api_client \
      --username <username> \
      --password <password> \
      --consumer-key <key> \
      --base-url <url of eve> \
      --httpmethod post \
      --payload '{"branch": "development/6.4", \
                  "prop00_name": "param_name", \
                  "prop00_value": "param_value"}' \
      /forceschedulers/force

Report any bug/error at release.engineering@scality.com

sources:
https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html
https://github.com/bullhorn/oauth-example-python/blob/master/oauth_example.py

"""
import argparse
import base64
import cookielib
import json
import pprint
import sys
import urllib
import urllib2
import urlparse


class AuthCodeRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        """Handler for 302 responses that assumes a properly constructed
        OAuth 302 response and pulls the token out of the header."""
        qs = urlparse.urlparse(headers["location"]).fragment
        token = urlparse.parse_qs(qs)['access_token'][0]
        return token


def get_access_token(username, password, consumer):
    """Get an access token from Bitbucket.

    Args:
        username (str): username of the bitbucket account.
        password (str): password of the bitbucket account
        consumer (str): consumer key of this app on bitbucket

    Returns:
        string containing the authentication token

    """
    base64auth = base64.b64encode('%s:%s' % (username, password))
    opener = urllib2.build_opener(AuthCodeRedirectHandler)
    auth_url = ('https://bitbucket.org/site/oauth2/authorize'
                '?client_id=%s&response_type=token' % consumer)
    req = urllib2.Request(auth_url)
    req.add_header("Authorization", "Basic %s" % base64auth)
    try:
        auth_code = opener.open(req)
    except urllib2.HTTPError as excp:
        sys.exit('HTTP error: %s (%s)' % (excp.reason, excp.code))

    if not isinstance(auth_code, str):
        sys.exit('Please visit this URL to authorize the token, '
                 'then launch this script again:\n%s' % auth_url)

    return auth_code


def request(token, base_url, endpoint, httpmethod,
            jsonrpcmethod, payload, version=2):
    """Access buildbot API thank to pre-obtained access token.

    Args:
        token (str): OAuth2 access token
        base_url (str): url of Eve/Buildbot instance
        endpoint (str): endpoint to query
        httpmethod (str): get/post/put/delete
        jsonrpcmethod (str): refer to buildbot's doc for possible values
        payload (dict): The parameters to send to jsonrpc
        version: version of api to hit

    Returns:
        API response (json)

    """
    cj = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))

    auth_url = base_url + '/auth/login?token=%s' % token
    auth_req = urllib2.Request(auth_url)
    try:
        auth_res = opener.open(auth_req)
    except urllib2.HTTPError as excp:
        sys.exit('HTTP error: %s (%s) (check consumer permissions)' % (
            excp.reason, excp.code))

    data = json.dumps({
        'id': 999,
        # sequence number doesn't matter for synchronous requests
        'jsonrpc': '2.0',
        'method': jsonrpcmethod,
        'params': payload
    })
    if endpoint.startswith('/'):
        endpoint = endpoint[1:]
    url = '%s/api/v%d/%s' % (base_url, version, endpoint)

    req = urllib2.Request(url, data=data)
    req.add_header('Content-Type', 'application/json')
    req.get_method = lambda: httpmethod.upper()

    try:
        res = opener.open(req)
    except urllib2.HTTPError as excp:
        sys.exit('HTTP error: %s (%s)' % (excp.reason, excp.code))
    return json.load(res)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Control Eve API via bitbucket oauth2')
    parser.add_argument('--username', '-u',
                        help='Bitbucket username',
                        required=True)
    parser.add_argument('--password', '-p',
                        help='Bitbucket password',
                        required=True)
    parser.add_argument('--consumer-key', '-k',
                        help='Bitbucket consumer key for this app',
                        metavar='CONSUMER_KEY',
                        required=True)
    parser.add_argument('--base-url', '-b',
                        help='eve base url',
                        metavar='EVE_BASE_URL',
                        required=True)
    parser.add_argument('--httpmethod', '-m',
                        help='get/post/put/delete',
                        choices=['get', 'post', 'put', 'delete'],
                        default='get')
    parser.add_argument('--jsonrpcmethod', '-j',
                        help='for now only "force" is supported',
                        choices=['force'],
                        default='force')
    parser.add_argument('--payload', '-l',
                        help='json data to send to the server',
                        metavar='JSON',
                        default='{}')
    parser.add_argument('--api-version', '-v',
                        help='api version to use (default to v2)',
                        metavar='INT', type=int,
                        default=2)
    parser.add_argument('endpoint',
                        help='api endpoint',
                        metavar='ENDPOINT')
    args = parser.parse_args(sys.argv[1:])

    githost = 'github' if 'github' in args.base_url else 'bitbucket'

    if githost == 'github':
        token = args.consumer_key
    else:
        token = get_access_token(
            args.username, args.password, args.consumer_key)

    req = request(
        token,
        args.base_url,
        args.endpoint,
        args.httpmethod,
        args.jsonrpcmethod,
        json.loads(args.payload),
        args.api_version
    )
    pprint.pprint(req)
