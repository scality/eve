#! /usr/bin/env python
"""Access Eve/buildbot API from the command line.

An OAuth token is required. It can be obtained from
the Git host provider by following the documentation in the file githost.py

Invocation examples:

List builders with:

    eve_api_client
      --token <token>
      --base-url <url of eve>
      /builders

Force a build with:

    eve_api_client
      --token <token>
      --base-url <url of eve>
      --httpmethod post
      --payload '{"branch": "development/6.4"}'
      /forceschedulers/force

Force a build with parameters (bitbucket version):

    eve_api_client
      --client-id <client id>
      --client-secret <client secret>
      --base-url <url of eve>
      --httpmethod post
      --payload '{"branch": "development/6.4",
                  "prop00_name": "param_name",
                  "prop00_value": "param_value"}'
      /forceschedulers/force

The script returns json data.

Report any bug/error at release.engineering@scality.com

"""
import argparse
import json
import os
import sys

from eve_client import EveClient
from githost import getProvider, guessProvider


# From Russell Heilling: http://stackoverflow.com/a/10551190
class EnvDefault(argparse.Action):  # pylint: disable=R0903

    def __init__(self, envvar, required=False, default=None, **kwargs):
        # Overriding default with environment variable if available
        if envvar in os.environ:
            default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--githost', '-g',
                        help='Remote git host name. Defaults to "auto" '
                             '(the client will try to guess which host '
                             'is used from other command line arguments); '
                             'Can also be set with environment variable '
                             'EVE_API_GITHOST.',
                        action=EnvDefault, envvar='EVE_API_GITHOST',
                        choices=['auto', 'bitbucket', 'github'],
                        default='auto')
    parser.add_argument('--dry-run', '-d',
                        help='Do not really change anything.',
                        default=False,
                        action='store_true')
    parser.add_argument('--token', '-k',
                        help='Git host authentication token. '
                             'Can also be set with environment variable '
                             'EVE_API_TOKEN.',
                        action=EnvDefault, envvar='EVE_API_TOKEN',
                        default='')
    parser.add_argument('--client-id', '-u',
                        help='Consumer client id (Bitbucket only). '
                             'Can also be set with environment variable '
                             'EVE_API_CLIENT_ID.',
                        action=EnvDefault, envvar='EVE_API_CLIENT_ID',
                        default='')
    parser.add_argument('--client-secret', '-p',
                        help='Consumer client secret (Bitbucket only). '
                             'Can also be set with environment variable '
                             'EVE_API_CLIENT_SECRET.',
                        action=EnvDefault, envvar='EVE_API_CLIENT_SECRET',
                        default='')
    parser.add_argument('--base-url', '-b',
                        help='Eve base url. '
                             'Can also be set with environment variable '
                             'EVE_API_VERSION.',
                        action=EnvDefault, envvar='EVE_API_URL',
                        required=True)
    parser.add_argument('--api-version', '-v',
                        help='API version to use (defaults to v2). '
                             'Can also be set with environment variable '
                             'EVE_API_VERSION.',
                        action=EnvDefault, envvar='EVE_API_VERSION',
                        metavar='INT', type=int,
                        default=2)
    parser.add_argument('--httpmethod', '-m',
                        help='HTTP method (default: GET)',
                        choices=['get', 'post', 'put', 'delete'],
                        default='get')
    parser.add_argument('--payload', '-l',
                        help='json data to send to the server',
                        metavar='JSON',
                        default='{}')
    parser.add_argument('endpoint',
                        help='api endpoint',
                        metavar='ENDPOINT')
    args = parser.parse_args(sys.argv[1:])

    githost = guessProvider(args.githost, args.githost, args.base_url)
    provider = getProvider(githost, token=args.token, client_id=args.client_id,
                           client_secret=args.client_secret)
    if args.dry_run:
        print('Dry run activated, the request was not executed')
        sys.exit(0)
    eve = EveClient(provider.token, args.base_url)
    req = eve._request(args.httpmethod,
                       args.endpoint,
                       json.loads(args.payload),
                       args.api_version)
    print(json.dumps(req))
